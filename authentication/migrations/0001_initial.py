# Generated by Django 3.2.7 on 2021-10-06 13:21

import authentication.models
import django.core.validators
from django.db import migrations, models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=150, unique=True, validators=[django.core.validators.RegexValidator('^[\\w\\.@+\\-\\s]+$', 'Enter a valid username. This value may contain only letters, numbers, spaces and @ . + - _ characters.')])),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=150, verbose_name='First name')),
                ('last_name', models.CharField(max_length=150, verbose_name='Last name')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=200, null=True, verbose_name='City')),
                ('postal_code', models.CharField(blank=True, max_length=200, null=True, verbose_name='Postal code')),
                ('country', models.CharField(blank=True, max_length=200, null=True, verbose_name='Country')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phone')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether this user can access this admin site.', verbose_name='is staff')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='is active')),
                ('is_restoring_password', models.BooleanField(default=True, help_text='Designates that this user should confirm email after password reset', verbose_name='restoring_password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='is superuser')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'authentication',
            },
            managers=[
                ('objects', authentication.models.CustomAccountManager()),
            ],
        ),
    ]
